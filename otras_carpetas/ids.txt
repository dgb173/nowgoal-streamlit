from google.colab import files
import os

SERVICE_ACCOUNT_FILE = 'credentials.json' # Asegúrate de que este nombre coincida

if not os.path.exists(SERVICE_ACCOUNT_FILE):
    print(f"Por favor, sube tu archivo '{SERVICE_ACCOUNT_FILE}'.")
    uploaded = files.upload()
    if SERVICE_ACCOUNT_FILE in uploaded:
        print(f"'{SERVICE_ACCOUNT_FILE}' subido correctamente.")
    else:
        print(f"Error: '{SERVICE_ACCOUNT_FILE}' no fue subido. El script no podrá acceder a Google Sheets.")
else:
    print(f"El archivo '{SERVICE_ACCOUNT_FILE}' ya existe en Colab.")
    # --- Instalaciones ---
# Instalar dependencias de Python (incluyendo webdriver-manager)
!pip install selenium gspread google-auth oauth2client webdriver-manager beautifulsoup4

# --- Imports ---
import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService # Renombrar para evitar confusión
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException, NoSuchElementException
from bs4 import BeautifulSoup
import os

# --- Configuración Global ---
SPREADSHEET_NAME = 'Datos'
SHEET_NAME = 'ID'
SERVICE_ACCOUNT_FILE = 'credentials.json'

# --- Definición de Funciones ---

def setup_driver():
    """Configuración robusta para Selenium en Colab."""
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox') # Esencial en Colab
    options.add_argument('--disable-dev-shm-usage') # Previene crashes por memoria compartida
    options.add_argument('--disable-gpu') # Generalmente bueno para headless
    options.add_argument("--window-size=1920,1080") # A veces ayuda con el renderizado
    options.add_argument("--disable-extensions")
    options.add_argument("--proxy-server='direct://'")
    options.add_argument("--proxy-bypass-list=*")
    options.add_argument("--start-maximized")
    options.add_argument("--ignore-certificate-errors")
    options.add_argument("--allow-running-insecure-content")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")


    print("Intentando instalar y configurar ChromeDriver con webdriver-manager...")
    try:
        # webdriver-manager se encargará de descargar el ChromeDriver compatible
        # y lo configurará para ser usado por Selenium
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        print("ChromeDriver configurado correctamente con webdriver-manager.")
        return driver
    except Exception as e:
        print(f"Error al configurar ChromeDriver con webdriver-manager: {e}")
        print("Esto puede deberse a problemas de red en Colab o incompatibilidades.")
        print("Intentando un enfoque alternativo si las instalaciones de apt están disponibles...")
        # Fallback si webdriver-manager falla (aunque debería ser la principal solución)
        # Esto asume que Colab podría tener un chromedriver preinstalado o que apt lo instala
        # Esta parte es menos fiable que webdriver-manager
        try:
            print("Intentando usar chromedriver del sistema (si existe)...")
            options_fallback = webdriver.ChromeOptions() # Opciones frescas
            options_fallback.add_argument('--headless')
            options_fallback.add_argument('--no-sandbox')
            options_fallback.add_argument('--disable-dev-shm-usage')
            options_fallback.add_argument('--disable-gpu')
            # No se especifica service si se espera que Selenium lo encuentre en el PATH
            driver_fallback = webdriver.Chrome(options=options_fallback)
            print("ChromeDriver del sistema iniciado (si estaba disponible).")
            return driver_fallback
        except Exception as e_fallback:
            print(f"Error con el enfoque alternativo: {e_fallback}")
            print("No se pudo iniciar Selenium. Verifica la conexión y el entorno de Colab.")
            return None


def get_gsheet_worksheet():
    if not os.path.exists(SERVICE_ACCOUNT_FILE):
        print(f"Error: '{SERVICE_ACCOUNT_FILE}' no encontrado.")
        return None
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE,
                                                               ['https://spreadsheets.google.com/feeds',
                                                                'https://www.googleapis.com/auth/drive'])
        client = gspread.authorize(creds)
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        print(f"Conectado a GSheet: '{SPREADSHEET_NAME}', Hoja: '{SHEET_NAME}'")
        return worksheet
    except Exception as e:
        print(f"Error conectando a GSheets: {e}"); return None

def find_id_ranges(sorted_ids):
    if not sorted_ids: return []
    numeric_ids = []
    for sid in sorted_ids:
        try: numeric_ids.append(int(sid))
        except ValueError: print(f"Adv: ID no numérico '{sid}' ignorado."); continue
    if not numeric_ids: return []
    numeric_ids.sort()
    ranges = []
    if not numeric_ids: return ranges
    current_start_id = numeric_ids[0]
    current_end_id = numeric_ids[0]
    for i in range(1, len(numeric_ids)):
        if numeric_ids[i] == current_end_id + 1:
            current_end_id = numeric_ids[i]
        else:
            ranges.append({'start_id': current_start_id, 'end_id': current_end_id})
            current_start_id = numeric_ids[i]; current_end_id = numeric_ids[i]
    ranges.append({'start_id': current_start_id, 'end_id': current_end_id})
    return ranges

# (Asegúrate de que tus imports y funciones setup_driver, get_gsheet_worksheet, find_id_ranges
#  estén definidas como en la versión anterior que funcionaba)

# ... (Aquí irían tus imports y las funciones setup_driver, get_gsheet_worksheet, find_id_ranges)
# COPIA ESAS FUNCIONES DESDE LA ÚLTIMA VERSIÓN FUNCIONAL Y PÉGALAS AQUÍ ARRIBA
# SI NO LO HACES, ESTE SCRIPT NO FUNCIONARÁ.

def scrape_league_data(driver, league_url):
    all_match_ids_for_league = set()
    league_name = "Desconocido"
    if not driver:
        print("Driver no inicializado.")
        return league_name, []

    try:
        print(f"\nNavegando a: {league_url}")
        driver.get(league_url)
        
        try:
            # Esperar a que el título de la liga esté presente y visible
            league_name_element = WebDriverWait(driver, 15).until(
                EC.visibility_of_element_located((By.ID, "titbox"))
            )
            league_name = league_name_element.text.strip().replace('\xa0', '')
            print(f"Liga: '{league_name}'")
        except TimeoutException:
            print("No se pudo encontrar el nombre de la liga (#titbox).")
            # Intentar obtenerlo de la URL o un título de página si es posible, o continuar con "Desconocido"
            try:
                page_title = driver.title
                if page_title and "Nowgoal" not in page_title: # Un intento básico
                    league_name = page_title.split(" Statistics")[0].strip()
                    print(f"Nombre de liga inferido del título: '{league_name}'")
            except:
                pass


        round_selectors_xpath_league = "//table[@id='Table2']//td[contains(@onclick, 'changeRound')]"
        round_selectors_xpath_cup = "//div[@id='SubSelectDiv']//li[contains(@onclick, 'changeSub')]"
        nav_type = None
        selector_xpath = None

        try:
            WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.XPATH, round_selectors_xpath_league)))
            if driver.find_elements(By.XPATH, round_selectors_xpath_league): # Re-chequear si realmente hay elementos
                nav_type = "league"
                selector_xpath = round_selectors_xpath_league
                print("Nav: Liga.")
        except TimeoutException:
            pass

        if not nav_type:
            try:
                WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.XPATH, round_selectors_xpath_cup)))
                if driver.find_elements(By.XPATH, round_selectors_xpath_cup): # Re-chequear
                    nav_type = "cup"
                    selector_xpath = round_selectors_xpath_cup
                    print("Nav: Copa.")
            except TimeoutException:
                pass

        if not nav_type or not selector_xpath:
            print("Sin nav por rondas/jornadas o selector no encontrado. Extrayendo de vista actual.")
            try:
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CSS_SELECTOR, "table#Table3 tbody tr[id]")))
                # Obtener page_source solo una vez si es necesario para BeautifulSoup
                page_source = driver.page_source
                soup = BeautifulSoup(page_source, 'html.parser')
                if (match_table := soup.find('table', id='Table3')) and (tbody := match_table.find('tbody')):
                    for row in tbody.find_all('tr', id=True):
                        if (match_id := row.get('id')) and match_id.isdigit():
                            all_match_ids_for_league.add(match_id)
                print(f"IDs (vista actual): {len(all_match_ids_for_league)}")
            except TimeoutException:
                print("Timeout esperando Table3 en vista actual o no hay partidos con ID.")
            except Exception as e_curr:
                print(f"Error vista actual: {e_curr}")
            return league_name, sorted(list(all_match_ids_for_league), key=lambda x: int(x) if x.isdigit() else 0)

        # Intentar obtener los selectores de ronda de forma más robusta
        try:
            round_clickable_elements_initial = WebDriverWait(driver, 10).until(
                EC.presence_of_all_elements_located((By.XPATH, selector_xpath))
            )
            num_round_selectors = len(round_clickable_elements_initial)
        except TimeoutException:
            print(f"Timeout esperando selectores de ronda iniciales con XPath: {selector_xpath}.")
            num_round_selectors = 0
        
        print(f"Selectores de ronda/jornada encontrados: {num_round_selectors}")
        if num_round_selectors == 0:
             print("No se encontraron elementos de navegación de ronda/jornada.")

        for i in range(num_round_selectors):
            try:
                # Re-localizar elementos en CADA iteración para evitar StaleElementReferenceException
                # Es costoso, pero necesario para páginas dinámicas si el DOM cambia mucho.
                current_round_selectors = WebDriverWait(driver, 10).until(
                    EC.presence_of_all_elements_located((By.XPATH, selector_xpath))
                )
                if i >= len(current_round_selectors):
                    print(f"Índice {i} fuera de rango después de re-localizar. Terminando rondas para esta liga."); break
                
                round_element_to_click = current_round_selectors[i]
                
                # Obtener texto de forma segura
                try:
                    round_text = round_element_to_click.text.strip() or f"Elem {i}"
                except StaleElementReferenceException:
                     print("StaleElement al obtener texto, reintentando localización del elemento específico para texto...")
                     # Re-localizar solo ESTE elemento si es posible, aunque puede ser complejo si el índice cambió
                     # Por simplicidad, si falla aquí, usamos un placeholder.
                     round_text = f"Elem {i} (Stale on text)"


                print(f"\nProcesando: '{round_text}' (índice {i})")

                # Verificar si ya está seleccionado (simplificado)
                # Esto puede ser menos preciso pero más rápido que inspeccionar atributos si el DOM cambia mucho
                # La lógica de no hacer clic si ya está seleccionado puede ser difícil de mantener 100% fiable
                # sin un identificador muy estable en la página. Por ahora, clicamos siempre si no es el primero.
                # O se podría añadir una lógica para recordar el último índice clickeado.
                
                # Para simplificar y potencialmente acelerar, podríamos decidir clickear siempre,
                # asumiendo que el primer estado cargado es el de la ronda "0" o la actual.
                # Si el `round_element_to_click` no es clickable, `WebDriverWait` lo detectará.
                
                print(f"Intentando clic en '{round_text}'")
                try:
                    # WebDriverWait para clickeable es más robusto
                    clickable_element = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable(round_element_to_click)
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center', inline: 'center'});", clickable_element)
                    time.sleep(0.3) # Pequeña pausa para el scroll
                    clickable_element.click() # Clic directo después de ser clickeable
                except Exception as click_err:
                    print(f"Error clic estándar ({click_err}), intentando clic JS...")
                    try:
                        driver.execute_script("arguments[0].click();", round_element_to_click) # Usar el original por si el 'clickable' se volvió stale
                    except Exception as js_click_err:
                         print(f"Error clic JS también: {js_click_err}. Saltando este elemento.")
                         continue
                
                # Espera a que la tabla se actualice. El contenido específico es lo importante.
                try:
                    WebDriverWait(driver, 25).until( # Aumentado ligeramente el timeout
                        EC.presence_of_element_located((By.CSS_SELECTOR, "table#Table3 tbody tr[id]"))
                    )
                    print("Contenido de Table3 detectado.")
                except TimeoutException:
                    print(f"Timeout esperando contenido en Table3 para '{round_text}'.")
                    # Intentar obtener page_source de todas formas por si hay algo, aunque sea un tbody vacío
                    # Esto es para evitar perder el parseo si la tabla simplemente no tiene partidos
                    pass # Continuar al parseo

                # Reducir el sleep aquí si la espera anterior es suficiente
                time.sleep(1.0) # Reducido, ajustar si los datos no se parsean bien

                # Parsear solo una vez por ronda
                page_source = driver.page_source
                soup = BeautifulSoup(page_source, 'html.parser')
                match_table = soup.find('table', id='Table3')

                if not match_table or not (tbody := match_table.find('tbody')):
                    print(f"Adv: No se encontró Table3 o tbody para '{round_text}'."); continue
                    
                current_round_ids_count = 0
                for row in tbody.find_all('tr', id=True):
                    if (match_id := row.get('id')) and match_id.isdigit():
                        all_match_ids_for_league.add(match_id); current_round_ids_count +=1
                print(f"IDs encontrados en '{round_text}': {current_round_ids_count}")

            except StaleElementReferenceException:
                print(f"StaleElementReferenceException principal en iteración de ronda {i}. Saltando al siguiente."); continue
            except TimeoutException:
                print(f"Timeout principal en la iteración de ronda '{round_text}'. Saltando al siguiente."); continue
            except Exception as e:
                print(f"Error general procesando '{round_text}' (índice {i}): {e}"); continue
        
        return league_name, sorted(list(all_match_ids_for_league), key=lambda x: int(x) if x.isdigit() else 0)

    except Exception as e:
        print(f"Error general scrapeando {league_url}: {e}")
        # Intentar cerrar el driver si falla gravemente para liberar recursos
        # if driver: driver.quit() # Esto podría ser problemático si se reutiliza el driver
        return league_name, sorted(list(all_match_ids_for_league), key=lambda x: int(x) if x.isdigit() else 0)


def write_data_to_gsheet(worksheet, data_to_write):
    """Escribe un lote de filas en Google Sheets."""
    if not worksheet:
        print("Worksheet no disponible para escribir.")
        return
    if not data_to_write:
        print("No hay datos para escribir en Google Sheets.")
        return

    print(f"\nIntentando escribir {len(data_to_write)} filas en Google Sheets...")
    try:
        # gspread append_rows es más eficiente para múltiples filas
        worksheet.append_rows(data_to_write, value_input_option='USER_ENTERED')
        print(f"{len(data_to_write)} filas añadidas exitosamente a Google Sheets.")
    except Exception as e_gs:
        print(f"Error masivo al añadir filas a Google Sheets: {e_gs}")
        print("Intentando añadir una por una como fallback...")
        for row in data_to_write:
            try:
                worksheet.append_row(row, value_input_option='USER_ENTERED')
                print(f"  Fila añadida (fallback): {row}")
                time.sleep(1.8) # Pausa necesaria si es una por una
            except Exception as e_gs_single:
                print(f"  Error añadiendo fila individual (fallback): {row} - {e_gs_single}")


def main_colab():
    worksheet = get_gsheet_worksheet()
    if not worksheet:
        print("No se pudo acceder a GSheet. Terminando.")
        return

    urls_to_scrape = [
        "https://football.nowgoal25.com/subleague/60",
        "https://football.nowgoal25.com/cupmatch/87",
    ]
    
    driver = setup_driver()
    if not driver:
        print("Fallo al iniciar WebDriver. Terminando.")
        return

    all_rows_for_gsheet = [] # Acumular todas las filas aquí

    try:
        for url in urls_to_scrape:
            league_name, all_ids_for_league = scrape_league_data(driver, url)
            
            if all_ids_for_league:
                print(f"\nTotal IDs para '{league_name}': {len(all_ids_for_league)}")
                id_ranges = find_id_ranges(all_ids_for_league)
                print(f"Rangos para '{league_name}':")
                if not id_ranges:
                    print("  No se encontraron rangos.")
                    # Si quieres añadir una fila incluso si no hay rangos:
                    # safe_league_name_no_range = league_name.replace("'", "\\'")
                    # formatted_no_range_string = f"{{'start_id': null, 'end_id': null, 'label': '{safe_league_name_no_range}'}},"
                    # all_rows_for_gsheet.append([league_name, formatted_no_range_string])
                    continue 

                for id_range in id_ranges:
                    # Corrección: start_id y end_id estaban invertidos en tu código anterior al crear formatted_range_string
                    start_id = id_range['start_id'] # El start_id del rango
                    end_id = id_range['end_id']     # El end_id del rango
                    
                    safe_league_name = league_name.replace("'", "\\'")
                    formatted_range_string = f"{{'start_id': {start_id}, 'end_id': {end_id}, 'label': '{safe_league_name}'}}," # Añadida coma al final
                    
                    all_rows_for_gsheet.append([league_name, formatted_range_string])
                    print(f"  Fila preparada para GSheets: {[league_name, formatted_range_string]}")
            else:
                print(f"No se encontraron IDs para '{league_name}' en {url}")
            print("-" * 50)
        
        # Escribir todos los datos acumulados a Google Sheets al final
        if all_rows_for_gsheet:
            write_data_to_gsheet(worksheet, all_rows_for_gsheet)
        else:
            print("No se generaron datos para escribir en Google Sheets.")

    finally:
        if driver:
            driver.quit()
            print("WebDriver cerrado.")

# --- Ejecución ---
if __name__ == "__main_colab__" or __name__ == "__main__":
    if os.path.exists(SERVICE_ACCOUNT_FILE):
        print(f"Iniciando proceso principal con '{SERVICE_ACCOUNT_FILE}'...")
        main_colab()
    else:
        print(f"'{SERVICE_ACCOUNT_FILE}' no existe. Ejecuta la celda de subida primero.")

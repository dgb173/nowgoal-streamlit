# app.py
import streamlit as st
import pandas as pd # Necesario para manejar DataFrames

# Asumiendo que estas funciones existen y funcionan como se espera en sus respectivos m√≥dulos
from modules.nowgoal_scraper import display_nowgoal_scraper_ui, get_gsheets_client_and_sheet
from modules.scrap import scrape_match_data # <- Importaci√≥n de nuestra funci√≥n de scraping
from modules.other_feature_NUEVO import display_other_feature_ui

def display_generic_scraper_ui():
    """
    Funci√≥n para encapsular la UI y l√≥gica del scraper gen√©rico de partidos.
    """
    st.subheader("üõ†Ô∏è Herramienta de Scraping de Partidos (tipo Nowgoal)")
    st.markdown("""
    Ingresa la URL de una p√°gina (ej. Nowgoal) que contenga una tabla de partidos
    con la estructura HTML esperada (tabla con `id="table_live"`, etc.)
    para extraer datos de los partidos listados.
    """)

    url_input_scraper = st.text_input(
        "URL para scrapear datos de partidos:",
        placeholder="Ej: https://live18.nowgoal25.com/",
        key="url_input_generic_scraper_tool3" # Clave √∫nica para este input
    )

    # Inicializar el DataFrame para esta herramienta en session_state si no existe
    if 'tool3_scraper_df' not in st.session_state:
        st.session_state.tool3_scraper_df = pd.DataFrame()
    if 'tool3_scrape_attempted' not in st.session_state:
        st.session_state.tool3_scrape_attempted = False


    if st.button("üîé Extraer Datos de la URL", key="btn_generic_scraper_tool3"):
        st.session_state.tool3_scrape_attempted = True
        if not url_input_scraper:
            st.warning("Por favor, ingresa una URL para scrapear.")
        elif not (url_input_scraper.startswith("http://") or url_input_scraper.startswith("https://")):
            st.warning("Por favor, ingresa una URL v√°lida (ej: http:// o https://).")
        else:
            with st.spinner(f"Accediendo a {url_input_scraper} y extrayendo datos..."):
                df_matches_new = scrape_match_data(url_input_scraper) # Usamos la funci√≥n importada

            if df_matches_new is None:
                st.error("Ocurri√≥ un error cr√≠tico durante el scraping (ej. timeout de Playwright, problema de red o la p√°gina no es accesible). Por favor, verifica la URL y tu conexi√≥n, o intenta m√°s tarde.")
            elif isinstance(df_matches_new, pd.DataFrame):
                if not df_matches_new.empty:
                    st.session_state.tool3_scraper_df = df_matches_new
                    st.success(f"¬°Scraping de partidos completado! Se encontraron {len(st.session_state.tool3_scraper_df)} partidos.")
                else:
                    st.info("Se accedi√≥ a la p√°gina, pero no se encontraron datos de partidos con la estructura esperada o la tabla estaba vac√≠a.")
                    st.session_state.tool3_scraper_df = pd.DataFrame()
            else:
                 st.error("El scraping devolvi√≥ un tipo de dato inesperado.")

    if not st.session_state.tool3_scraper_df.empty:
        st.dataframe(st.session_state.tool3_scraper_df, use_container_width=True, hide_index=True)
    elif st.session_state.tool3_scrape_attempted:
        st.info("No hay datos de partidos para mostrar para esta URL. Ingresa una URL v√°lida y presiona el bot√≥n.")


def main():
    st.set_page_config(
        page_title="Nowgoal Data Scraper & Tools",
        page_icon="‚öΩ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("‚öΩüìä App de An√°lisis de Datos y Herramientas üìä‚öΩ")
    st.markdown("""
    Bienvenido a la aplicaci√≥n central. Usa el men√∫ lateral para navegar entre las diferentes herramientas disponibles.
    """)

    st.sidebar.header("üõ†Ô∏è Herramientas Disponibles")
    selected_tool = st.sidebar.radio(
        "Selecciona una herramienta:",
        ("1. Extractor de Datos de Nowgoal", "2. Otra Funcionalidad (Beta)", "3. Scrapear datos"),
        key="main_tool_selection_final"
    )

    gsheets_sh_handle = None

    if selected_tool == "1. Extractor de Datos de Nowgoal":
        try:
            if "gcp_service_account" in st.secrets:
                gsheets_credentials = st.secrets["gcp_service_account"]
                with st.spinner("‚öôÔ∏è Estableciendo conexi√≥n con Google Sheets..."):
                    _, gsheets_sh_handle_temp = get_gsheets_client_and_sheet(gsheets_credentials)

                if not gsheets_sh_handle_temp:
                    st.sidebar.error("‚ùå Error conectando a GSheets. Verifica secretos y conexi√≥n.")
                    st.error("No se pudo conectar a Google Sheets. El extractor no funcionar√°.")
                else:
                    st.sidebar.success("üîó Conexi√≥n a Google Sheets establecida.")
                    gsheets_sh_handle = gsheets_sh_handle_temp
            else:
                # No mostrar error si el usuario no ha seleccionado esta herramienta.
                # Podr√≠as querer una advertencia si `selected_tool` es el Extractor.
                if selected_tool == "1. Extractor de Datos de Nowgoal":
                    st.sidebar.error("‚ùóÔ∏è `gcp_service_account` NO encontrado en `st.secrets`.")
                    st.error("Error de Configuraci√≥n: Faltan las credenciales de Google Sheets para esta herramienta.")


        except Exception as e:
            st.sidebar.error(f"üÜò Error al procesar credenciales GSheets: {str(e)[:100]}...")
            st.error(f"Un error ocurri√≥ con las credenciales de Google Sheets: {e}.")

    # L√≥gica para mostrar la herramienta seleccionada
    if selected_tool == "1. Extractor de Datos de Nowgoal":
        if gsheets_sh_handle:
            display_nowgoal_scraper_ui(gsheets_sh_handle)
        else:
            # Este mensaje se mostrar√° si la opci√≥n 1 est√° seleccionada pero gsheets_sh_handle no se pudo obtener
            st.warning("‚ö†Ô∏è La conexi√≥n a Google Sheets es necesaria para 'Extractor de Datos de Nowgoal' y no se pudo establecer.")
            st.info("Aseg√∫rate de que `gcp_service_account` est√© configurado correctamente en los secretos de Streamlit si deseas usar esta funcionalidad.")

    elif selected_tool == "2. Otra Funcionalidad (Beta)":
        display_other_feature_ui()
    
    elif selected_tool == "3. Scrapear datos":
        # Aqu√≠ llamamos a la funci√≥n que contendr√° la UI y l√≥gica del scraper
        display_generic_scraper_ui()


if __name__ == "__main__":
    main()

# app.py (Prueba de Conexi√≥n a GSheets con Cacheo)
import streamlit as st
# Aseg√∫rate de que la carpeta 'modules' y 'modules/__init__.py' (vac√≠o) existan
# y que 'nowgoal_scraper.py' est√© dentro de 'modules'.
from modules.nowgoal_scraper import get_gsheets_client_and_sheet # Importa la funci√≥n

st.set_page_config(
    page_title="Test Conexi√≥n GSheets",
    page_icon="üîó",
    layout="wide" # Opcional, para usar m√°s ancho de pantalla
)

st.title("üîó Prueba de Conexi√≥n a Google Sheets (con Cacheo)")
st.write("Esta prueba intentar√° conectar a Google Sheets usando la funci√≥n `get_gsheets_client_and_sheet` del m√≥dulo `nowgoal_scraper`.")
st.write("La funci√≥n `get_gsheets_client_and_sheet` deber√≠a tener el decorador `@st.cache_resource` activo para esta prueba.")
st.markdown("---")

gsheets_credentials = None
gsheets_sh_handle = None # Para el handle de la hoja de c√°lculo

# 1. Intentar cargar las credenciales desde st.secrets
st.subheader("Paso 1: Cargar Credenciales desde st.secrets")
try:
    if "gcp_service_account" in st.secrets:
        gsheets_credentials = st.secrets["gcp_service_account"]
        st.success("‚úÖ Credenciales encontradas en `st.secrets['gcp_service_account']`.")

        # --- INICIO SECCI√ìN DE DEBUG TEMPORAL (Opcional, pero √∫til) ---
        with st.expander("Detalles de las credenciales cargadas (Parcial)", expanded=False):
            if isinstance(gsheets_credentials, dict):
                st.write("Tipo de `gsheets_credentials`: Diccionario (¬°Correcto!)")
                st.json({
                    "project_id": gsheets_credentials.get('project_id', 'NO ENCONTRADO'),
                    "client_email": gsheets_credentials.get('client_email', 'NO ENCONTRADO'),
                    "private_key_presente": "-----BEGIN PRIVATE KEY-----" in gsheets_credentials.get('private_key', '') if gsheets_credentials.get('private_key') else False
                })
            else:
                st.error(f"Tipo de `gsheets_credentials` NO es Diccionario. Es: {type(gsheets_credentials)}")
                st.text("Contenido (truncado): " + str(gsheets_credentials)[:200] + "...")
        # --- FIN SECCI√ìN DE DEBUG TEMPORAL ---

    else:
        st.error("‚ùóÔ∏è `gcp_service_account` NO encontrado en `st.secrets`.")
        st.warning("La aplicaci√≥n no podr√° conectar a Google Sheets sin estas credenciales. "
                   "Aseg√∫rate de haber configurado los secretos correctamente en Streamlit Cloud.")
        st.stop() # Detener si no hay credenciales, ya que el prop√≥sito es probar la conexi√≥n

except Exception as e:
    st.error(f"üÜò Error catastr√≥fico al intentar acceder a `st.secrets`: {e}")
    st.info("Esto podr√≠a indicar un problema con la plataforma Streamlit o una configuraci√≥n de secretos muy da√±ada.")
    st.stop()

st.markdown("---")

# 2. Intentar conectar usando la funci√≥n (cacheada)
st.subheader("Paso 2: Conectar usando `get_gsheets_client_and_sheet`")
if gsheets_credentials:
    st.write("Intentando llamar a `get_gsheets_client_and_sheet(credentials_dict)`...")
    try:
        # Esta es la llamada cr√≠tica que podr√≠a estar fallando con tokenize.TokenError
        # o con otros errores si las credenciales son v√°lidas pero los permisos/API no.
        with st.spinner("‚öôÔ∏è Conectando a Google Sheets... (Esto puede tardar si es la primera vez o el cache ha expirado)"):
            gc_client, gsheets_sh_handle_temp = get_gsheets_client_and_sheet(gsheets_credentials)

        if gsheets_sh_handle_temp and gc_client: # Comprobar ambos
            gsheets_sh_handle = gsheets_sh_handle_temp
            st.success("‚úÖ ¬°Conexi√≥n a Google Sheets exitosa!")
            st.info(f"Nombre de la Hoja de C√°lculo (Spreadsheet) abierta: **{gsheets_sh_handle.title}**")
            try:
                worksheets = gsheets_sh_handle.worksheets()
                st.write(f"Hojas (Worksheets) encontradas en el archivo: `{[ws.title for ws in worksheets]}`")
            except Exception as e_ws:
                st.warning(f"Se conect√≥ al archivo, pero no se pudieron listar las hojas: {e_ws}")
        else:
            st.error("‚ùå Fall√≥ la conexi√≥n a Google Sheets (la funci√≥n `get_gsheets_client_and_sheet` devolvi√≥ None).")
            st.info("Posibles causas: Credenciales incorrectas (aunque encontradas), "
                    "cuenta de servicio sin permisos para la API de Sheets/Drive o para acceder al archivo, "
                    "nombre de la hoja de c√°lculo incorrecto en `NOMBRE_SHEET` dentro de `nowgoal_scraper.py`.")
            st.info("Revisa los logs de la aplicaci√≥n en Streamlit Cloud ('Manage app' -> 'Logs') para m√°s detalles si el error no es obvio aqu√≠.")

    except Exception as e:
        st.error(f"üí• Ocurri√≥ una excepci√≥n al llamar a `get_gsheets_client_and_sheet`: {type(e).__name__}")
        st.error(f"Mensaje: {e}")
        st.error("Este podr√≠a ser el `tokenize.TokenError` si el problema persiste con el mecanismo de cacheo. "
                 "Tambi√©n podr√≠a ser un error de `gspread` si las credenciales son inv√°lidas o hay problemas de permisos.")
        st.info("Revisa los logs de la aplicaci√≥n en Streamlit Cloud ('Manage app' -> 'Logs') para el traceback completo.")

else:
    st.warning("No se intent√≥ la conexi√≥n porque las credenciales no se cargaron correctamente en el Paso 1.")

st.markdown("---")
st.info("Fin de la prueba de conexi√≥n.")
